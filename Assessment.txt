create database LMS_DB;
use LMS_DB;
create table LMS_Members(member_id varchar(10),member_name varchar(30),city varchar(20),Date_Register date,date_expire date,membership_status varchar(15))
insert into LMS_Members values("LM006","MOHAN","CHENNAI",'2012-04-12','2013-05-16',"TEMPORARY")
ALTER TABLE LMS_Members add constraint pk primary key(member_id)
select * from LMS_Members
desc LMS_Members
#_______________________________________________________________________
create table LMS_SUPPLIERS_DETAILS(SUPPLIER_ID VARCHAR(3)PRIMARY KEY,SUPPLIER_NAME VARCHAR(30),ADDRESS VARCHAR(50),CONTACT INT,EMAIL VARCHAR(15))
INSERT INTO LMS_SUPPLIERS_DETAILS VALUES("S04","KAVARI STORE","DELHI",86300014,"AKBAKST@AOL.COM")
SELECT * FROM LMS_SUPPLIERS_DETAILS
#___________________________________________________________________________
CREATE TABLE LMS_FINE_DETAILS(FINE_RANGE VARCHAR(3),FINE_AMOUNT INT)
ALTER TABLE LMS_FINE_DETAILS MODIFY FINE_AMOUNT NUMERIC(10,2)
INSERT INTO LMS_FINE_DETAILS VALUES("R6",200.00)
SELECT * FROM LMS_FINE_DETAILS
#____________________________________________________________________________
CREATE TABLE LMS_BOOK_DETAILS(BOOK_CODE VARCHAR(10)PRIMARY KEY,BOOK_TITLE VARCHAR(50),
CATEGORY VARCHAR(15),AUTHOR VARCHAR(30),PUBLICATION VARCHAR(30),PUBLISH_DATE DATE,BOOK_EDITION INT,
PRICE INT,RACH_NUM VARCHAR(3),DATE_ARRIVAL DATE,SUPPLIER_ID VARCHAR(3)REFERENCES LMS_SUPPLIERS_DETAILS(SUPPLIER_ID))
ALTER TABLE LMS_BOOK_DETAILS MODIFY PRICE NUMERIC(8,2)

SELECT * FROM LMS_BOOK_DETAILS
#_______________________________________________________________________________________
CREATE TABLE LMS_BOOK_ISSUE(BOOK_ISSUE_NO INT PRIMARY KEY,MEMBER_ID VARCHAR(10)REFERENCES LMS_MEMBERS(MEMBER_ID),BOOK_CODE VARCHAR(10)REFERENCES LMS_BOOK_DETAILS(BOOK_CODE),DATE_ISSUE DATE,DATE_RETURN DATE,DATE_RETURNED DATE,BOOK_ISSUE_STATUS VARCHAR(20),FINE_RANGE VARCHAR(3) REFERENCES LMS_FINE_DETAILS(FINE_RANGE))
INSERT INTO LMS_BOOK_ISSUE VALUES(7,"LM003","BL000007",'2012-04-22','2012-05-07','2012-05-25',NULL,"R4")
SELECT * FROM LMS_BOOK_ISSUE
#______________________________________________________________________________________________________
1.
DESC LMS_BOOK_DETAILS

2.
SELECT * FROM LMS_FINE_DETAILS

3.
SELECT MEMBER_NAME FROM LMS_Members WHERE CITY="CHENNAI"

4.
SELECT MEMBER_ID,MEMBER_NAME,CITY,MEMBERSHIP_STATUS FROM LMS_MEMBERS WHERE MEMBERSHIP_STATUS="PERMANENT"

5.
SELECT MEMBER_ID,MEMBER_NAME FROM LMS_MEMBERS WHERE MEMBER_ID=(SELECT MEMBER_ID FROM LMS_BOOK_ISSUE WHERE BOOK_CODE="BL000002")

6.
SELECT BOOK_CODE,BOOK_TITLE,AUTHOR FROM LMS_BOOK_DETAILS WHERE AUTHOR LIKE 'P%'

7.
SELECT COUNT(CATEGORY) AS "NO_OF_BOOKS" FROM LMS_BOOK_DETAILS WHERE CATEGORY="JAVA";

8.
SELECT CATEGORY,COUNT(CATEGORY) AS "NO_OF_BOOKS" FROM LMS_BOOK_DETAILS GROUP BY CATEGORY;

9.
SELECT COUNT(PUBLICATION) AS "NO_OF_BOOKS" FROM LMS_BOOK_DETAILS WHERE PUBLICATION="PRENTICE HALL";

10.
SELECT BOOK_CODE,BOOK_TITLE FROM LMS_BOOK_DETAILS WHERE BOOK_CODE IN(SELECT BOOK_CODE FROM LMS_BOOK_ISSUE WHERE DATE_ISSUE='2012-04-01')

11.
SELECT MEMBER_ID,MEMBER_NAME,DATE_REGISTER,DATE_EXPIRE FROM LMS_MEMBERS WHERE DATE_EXPIRE<'2013-04-00'

12.
SELECT MEMBER_ID,MEMBER_NAME,DATE_REGISTER,DATE_EXPIRE ,MEMBERSHIP_STATUS FROM LMS_MEMBERS WHERE MEMBERSHIP_STATUS="TEMPORARY" AND DATE_REGISTER<'2012-03-00' 

13.
SELECT MEMBER_ID,MEMBER_NAME FROM LMS_MEMBERS WHERE CITY ="CHENNAI" OR CITY ="DELHI"

14.
SELECT CONCAT(CONCAT(BOOK_TITLE,"IS WRITTEN BY "),AUTHOR) FROM LMS_BOOK_DETAILS

15.
SELECT AVG(PRICE) AS "AVERAGEPRICE" FROM LMS_BOOK_DETAILS WHERE CATEGORY="JAVA"

16.
SELECT SUPPLIER_ID,SUPPLIER_NAME,EMAIL FROM LMS_SUPPLIERS_DETAILS WHERE EMAIL LIKE '%GMAIL%'

17.
SELECT SUPPLIER_NAME,SUPPLIER_ID,COALESCE(CONTACT,EMAIL,ADDRESS)from LMS_SUPPLIERS_DETAILS 

18.
SELECT MEMBER_ID,MEMBER_NAME,BOOK_CODE,BOOK_TITLE FROM LMS_MEMBERS JOIN LMS_BOOK_DETAILS

19.
SELECT MEMBER_ID,MEMBER_NAME,FINE_RANGE,FINE_AMOUNT FROM LMS_MEMBERS JOIN LMS_FINE_DETAILS WHERE FINE_AMOUNT<100


20.
SELECT BOOK_CODE,BOOK_TITLE,RACH_NUM FROM LMS_BOOK_DETAILS WHERE RACH_NUM="A1" ORDER BY BOOK_TITLE 

21.
SELECT MEMBER_ID,MEMBER_NAME,DATE_REGISTER FROM LMS_MEMBERS WHERE MEMBER_ID NOT IN(SELECT MEMBER_ID FROM LMS_BOOK_ISSUE)

22.
SELECT MEMBER_ID,MEMBER_NAME FROM LMS_MEMBERS WHERE MEMBER_ID NOT IN(SELECT MEMBER_ID FROM LMS_BOOK_ISSUE JOIN LMS_FINE_DETAILS ON LMS_BOOK_ISSUE.FINE_RANGE=LMS_FINE_DETAILS.FINE_RANGE WHERE YEAR(DATE_RETURNED)=2012 GROUP BY MEMBER_ID HAVING SUM(FINE_AMOUNT)>0)

23.
SELECT RACH_NUM,COUNT(RACH_NUM) AS "NOOFBOOKS" FROM LMS_BOOK_DETAILS GROUP BY RACH_NUM ORDER BY RACH_NUM

24.
SELECT BOOK_ISSUE_NO,MEMBER_NAME,DATE_REGISTER,DATE_EXPIRE,BOOK_TITLE,CATEGORY,AUTHOR,PRICE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_AMOUNT FROM LMS_BOOK_DETAILS JOIN LMS_MEMBERS JOIN LMS_FINE_DETAILS JOIN LMS_BOOK_ISSUE


25.
SELECT LMS_MEMBERS.MEMBER_ID,MEMBER_NAME,3-COUNT(DATE_ISSUE) AS "REMAINING BOOKS" FROM LMS_MEMBERS LEFT JOIN LMS_BOOK_ISSUE ON  LMS_MEMBERS.MEMBER_ID=LMS_BOOK_ISSUE.MEMBER_ID GROUP BY MEMBER_ID

26.
SELECT * FROM LMS_SUPPLIERS_DETAILS  WHERE SUPPLIER_ID<="S03" ORDER BY SUPPLIER_ID 


27.
SELECT * FROM LMS_SUPPLIERS_DETAILS  WHERE SUPPLIER_ID>"S03" ORDER BY SUPPLIER_ID 

28.
RENAME TABLE LMS_MEMBERS TO LMS_MEMBERS_DETAILS

29.
TRUNCATE TABLE LMS_FINE_DETAILS

30.
SELECT BOOK_TITLE FROM LMS_BOOK_DETAILS